/*****************************************************
 * Class            :   OpportunityTriggerHelper
 * References       :   OpportunityTriggerHandler
 * Description      :   This is the helper class for OpportunityTriggerHandler
 *                      All the OpportunityTrigger logic should be written here and then call it from OpportunityTriggerHandler
 * Change Log       :
 *      [Lokesh - Fluido]        [26th Sep, 2019]        [Initial Development]
 *****************************************************/
 public with sharing class OpportunityTriggerHelper {

    //can be reused
    public static final Id b2cApplicantRecTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Application').getRecordTypeId();
    public static final Map<String,String> checkboxsMap = new Map<String,String> {'Digitalisation_and_Analytics__c'=>'Digitalisation and Analytics', 
                                                                    'Finance_Economics_and_Governance__c'=>'Finance, Economics and Governance',
                                                                    'International_Business__c'=>'International Business',
                                                                    'Management__c'=>'Management',
                                                                    'Marketing_Communication_and_Culture__c'=>'Marketing, Communication and Culture',
                                                                    'Organisational_Dev_HR_Management__c'=>'Organisational Development and Human Resource Management',
                                                                    'Project_Management__c'=>'Project Management',
                                                                    'Public_Sector__c'=>'Public Sector',
                                                                    'Real_Estate_Retail_and_Business_Law__c'=>'Real Estate, Retail and Business Law',
                                                                    'Strategy_Innovation_and_Sustainability__c'=>'Strategy, Innovation and Sustainability'};

    /*
     * Helper method for OpportunityHandler
     * 1. If there are no related Opportunities with the Record Type = Applicant Opportunity, the checkbox “Prospect__c” on the related contact shall be checked.
     * 2. If there are related Opportunities with the Record Type = Applicant Opportunity that are not Closed, the checkbox “Applicant__c” on the related contact shall be checked.
     */
    public static void updateCustomerCategoryOnContact(List<Opportunity> newOppList, Map<Id,Opportunity> newOppMap, List<Opportunity> oldOppList, Map<Id,Opportunity> oldOppMap){
        List<Opportunity> oppListToProcess = new List<Opportunity>();

        //to store the opportunity related contact id
        Set<Id> contactIdSet = new Set<Id>();

        //to update the contacts
        List<Contact> contactsToUpdate =  new List<Contact>();

        //for after insert and after update events
        if(newOppList != null) {
            oppListToProcess = newOppList;
        } else if(oldOppList != null ) { //for after delete events
            oppListToProcess = oldOppList;
        }

        for(Opportunity opp : oppListToProcess) {
            //if contact exist on opportunity
            if(opp.Contact_custom__c != null) {
                contactIdSet.add(opp.Contact_custom__c);

                //this will be exected on update and delete events
                if(oldOppMap != null && oldOppMap.get(opp.Id) != null){
                    //If contact is changed, then add the contactid
                    if(oldOppMap.get(opp.Id).Contact_custom__c != opp.Contact_custom__c) {
                        contactIdSet.add(oldOppMap.get(opp.Id).Contact_custom__c);
                    }
                }
            }
        } 

        //get the contacts to update the Prospect__c and Applicant__c fields
        Map<Id,Contact> contactMap = new Map<Id,Contact>([SELECT Id,Prospect__c, Applicant__c, Enrolled_Applicant__c, (SELECT ID, IsClosed FROM Opportunities1__r WHERE RecordtypeId =: b2cApplicantRecTypeId) FROM Contact WHERE Id IN: contactIdSet]);
        
        for(Contact con : contactMap.values()) {
            System.debug('Contact : '+con);
            System.debug('Related : '+con.Opportunities1__r);

            //to track contact needs to be update or not
            Boolean updateContact = false;

            //if there are any opportunities exist
            if(con.Opportunities1__r.size() > 0) {
                boolean openOppFound = false;
                //get the all the related opportunities for current contact
                for(Opportunity opp : con.Opportunities1__r){
                    //if opportunity is not closed
                    if(!opp.isClosed ){
                        openOppFound = true;
                    }
                }

                //if contact has any open opportunity
                if(openOppFound) {
                    if(!con.Applicant__c) {
                        con.Applicant__c =  true;
                        updateContact = true;
                    }
                } else {
                    //if there is no open opportunity then set applicant__c field on contact to false
                    con.Applicant__c = false;
                    updateContact = true;
                }

                if(con.Prospect__c) {
                    con.Prospect__c = false;
                    updateContact = true;
                }
            } else { // if there is no application opportunities 
                if(!con.Prospect__c){
                    con.Prospect__c = true;
                    updateContact = true;
                }
                if(con.Applicant__c){
                    con.Applicant__c = false;
                    updateContact = true;
                }
            }

            if(updateContact){
                contactsToUpdate.add(con);
            }
        }

        if(contactsToUpdate.size() > 0) {
            System.debug('ContactsToUpdate:'+contactsToUpdate);
            update contactsToUpdate;
        }
    }

    public static void createIntrestForContacts(Map<Id,Opportunity> newMap, Map<Id,Opportunity> oldMap) {
        Set<String> newInterests = new Set<String>();//to store interested items
        Set<String> unInterests = new Set<String>();//to store un-interested items
        Map<Id, List<String>> oppAcademicInterestMap = new Map<Id, List<String>>();//opportunity with realated interest checked
        Map<Id, List<String>> oppAcademicUnInterestMap = new Map<Id, List<String>>();//opportunities with related interested unchecked
        List<Interest__c> interestToInsert = new List<Interest__c>();//new interest__c records to insert
        List<Opportunity> oppToUpdate = new List<Opportunity>();//old interest__c records to update
        Set<Id> contactIdSet = new Set<Id>();

        for(Opportunity opp : newMap.values()) {
            if(opp.Contact_custom__c != NULL) {
                contactIdSet.add(opp.Contact_custom__c);
            }
        }

        //if contact existing, then process the opportunity to next steps, else ignore it
        for(Opportunity opp : newMap.values()) {
            if(opp.Contact_custom__c != NULL) {
                Opportunity oldOpp = oldMap.get(opp.Id);
                //for each opportunity check the related checkboxes to create interest
                for(String field : checkboxsMap.keyset()) {
                    Boolean curFieldVal = (Boolean) opp.get(field);

                    //get the related field value
                    String relatedInterest = checkboxsMap.get(field);

                    //if the field is checked for new opportuity (or) old value of the field is unchecked and new value is checked 
                    if((oldOpp == null && curFieldVal) ||  (oldOpp != null && oldOpp.get(field) == false && curFieldVal ))  {
                        //insert related process
                        List<String> academicIntrest = oppAcademicInterestMap.get(opp.Contact_custom__c);
                        newInterests.add(relatedInterest);
                        if(academicIntrest == null ) {
                            academicIntrest = new List<String>();
                        } 
                        academicIntrest.add(relatedInterest);
                        oppAcademicInterestMap.put(opp.Contact_custom__c,academicIntrest);
                    } else if(oldOpp != null && oldOpp.get(field) == true && curFieldVal == false){
                        //deletion related process
                        List<String> academicUnIntrest = oppAcademicUnInterestMap.get(opp.Contact_custom__c);
                        unInterests.add(relatedInterest);
                        if(academicUnIntrest == null ) {
                            academicUnIntrest = new List<String>();
                        } 
                        academicUnIntrest.add(relatedInterest);
                        oppAcademicInterestMap.put(opp.Contact_custom__c,academicUnIntrest);
                    }
                }
            }
        }

        System.debug('ContactwithInterest: '+oppAcademicInterestMap);
        if(oppAcademicInterestMap.size() > 0){
            //get the existing interest related to the contact selected in the opportunity
            List<Contact> contactWithInterest = new List<Contact>([SELECT Id, 
                                                                    (SELECT Id, Contact__c, 
                                                                    Category__c , 
                                                                    Interest__c , 
                                                                    Source_System__c 
                                                                    FROM Person_Interests__r 
                                                                    WHERE Interest__c IN: newInterests)
                                                                FROM Contact 
                                                                WHERE ID IN: oppAcademicInterestMap.keySet() 
                                                                LIMIT 50000]); 
            Map<String,Interest__c> conInterestMap = new Map<String, Interest__c>();

            //existing contact with related interest
            //key is the combination of contactid+related interest value
            for(Contact con : contactWithInterest){
                for(Interest__c curInt : con.Person_Interests__r){
                    if(!String.isBlank(curInt.Interest__c)){
                        String key = con.Id+curInt.Interest__c;
                        conInterestMap.put(key, curInt);
                    }
                }
            }

            //iterate over each contact selected in the opportunity and filter the interest that are already exist
            for(Id conId : oppAcademicInterestMap.keySet()){
                for(String s : oppAcademicInterestMap.get(conId)){
                    Interest__c newInt = new Interest__c();
                    Interest__c existingInt = conInterestMap.get(conId+s);
                    System.debug('existingInt: '+existingInt);
                    if(existingInt != null){
                        if(existingInt.Source_System__c == 'Portal'){
                            newInt.Id = existingInt.Id;
                            newInt.Source_System__c = 'Salesforce';
                            interestToInsert.add(newInt);
                        }
                    } else {
                        newInt.Contact__c = conId;
                        newInt.Interest__c = s;
                        newInt.Category__c = 'Academic Interest';
                        newInt.Source_System__c = 'Salesforce';
                        interestToInsert.add(newInt);
                    }
                }
            }

            if(interestToInsert.size() > 0) {
                for(Interest__c i : interestToInsert){
                    System.debug('Insert: '+i);
                }
                UPSERT interestToInsert;
            }
        }

    }
}
